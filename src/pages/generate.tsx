import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { Input } from "~/component/Input";
import { FormGroup } from "~/component/FormGroup";
import { useState } from "react";
import { Button } from "~/component/Button";
import Image from "next/image";

const colors = ['orange', 'yellow', 'red', 'pink', 'purple', 'green', 'teal', 'blue', 'black', 'white', 'gray'];
const styles = ['vector', 'claymorphic', 'realistic', 'metallic iridescent', 'pixelated', 'retro', 'cartoon', 'watercolor', 'abstract', 'cubist', 'bauhaus'];

const GeneratePage: NextPage = () => {

  const [form, setForm] = useState({
    prompt: '',
    color: '',
    numIcons: '1',
    style: '',
  });
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string; }[]>([]);

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    }
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    generateIcon.mutate({
      ...form,
      numIcons: parseInt(form.numIcons)
    });
    // setForm(prev => ({ ...prev, prompt: "" }));
  }

  return (
    <>
      <Head>
        <title>Create icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-10 mb-24 gap-4 flex flex-col px-4 items-center">
        <h1 className="text-3xl mt-2 mb-10 self-start">Create Icons</h1>
        <form
          onSubmit={handleFormSubmit}
          className="flex flex-col gap-12 w-3/4">
          <FormGroup className="flex flex-col gap-1.5">
            <label className="text-lg font-semibold">What object do you want to to see in the icon?</label>
            <Input
              required
              value={form.prompt}
              onChange={e => setForm(prev => ({ ...prev, prompt: e.target.value }))}>
            </Input>
          </FormGroup>

          <FormGroup className="flex flex-col gap-1.5">
            <h2 className="text-lg font-semibold">What background color would you like?</h2>
            <div className="grid grid-cols-3 gap-1.5">
              {colors.map(color => (
                <label key={color} className="flex gap-2">
                  <input required type="radio" name="color" value={color}
                    checked={color === form.color}
                    onChange={() => setForm(prev => ({ ...prev, color }))} />
                  {color}
                </label>
              ))}
            </div>
          </FormGroup>

          <FormGroup className="flex flex-col gap-1.5">
            <h2 className="text-lg font-semibold">What design would you like?</h2>
            <div className="grid grid-cols-3 gap-1.5">
              {styles.map(style => (
                <label key={style} className="flex gap-2">
                  <input type="radio" name="style" value={style}
                    checked={style === form.style}
                    onChange={() => setForm(prev => ({ ...prev, style }))} />
                  {style}
                </label>
              ))}
            </div>
          </FormGroup>

          <FormGroup className="flex flex-col gap-1.5">
            <label className="text-lg font-semibold">How many icons would you like?</label>
            <Input
              required
              value={form.numIcons}
              pattern="[1-9]|10" inputMode='numeric'
              onChange={e => setForm(prev => ({ ...prev, numIcons: e.target.value }))}>
            </Input>
          </FormGroup>

          <Button disabled={generateIcon.isLoading} isloading={generateIcon.isLoading}>Submit</Button>
        </form>

        {imagesUrl.length > 0 && (
          <section className="grid grid-cols-4 gap-4 my-12">
            {imagesUrl.map(({ imageUrl }) => (
              <Image
                key={imageUrl}
                src={imageUrl}
                width="256" height="256" alt="generated img from prompt" className="w-full" />

            ))}
          </section>
        )
        }
      </main>
    </>
  );
};

export default GeneratePage;